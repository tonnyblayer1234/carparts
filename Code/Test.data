{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1gW5ok_A-VXgIBKzEkG3vU_vsdxfH0s-s","timestamp":1719990981204},{"file_id":"1rnmnY-TeyfSROXXIavQbQ_AnsVA8NE2l","timestamp":1719894899516},{"file_id":"1G0poReEBrTBxF0aabYIiDCta2sFReUgH","timestamp":1715853852962},{"file_id":"1zdQi7fvahVV02bJ8OxLtimPtFnswd7Aw","timestamp":1685445753995},{"file_id":"1mRPWF3dyrVqtWd8pK2vKkP8MmayvgLww","timestamp":1671468283200},{"file_id":"1FjnEtehY7hCNfLPn1i4c0ci0GmJroW_q","timestamp":1666432586964}],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["# Mount the drive"],"metadata":{"id":"5z6p7yHaYpro"}},{"cell_type":"code","execution_count":1,"metadata":{"id":"vJT4hW59YfVu","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719991071104,"user_tz":-330,"elapsed":23492,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"ebe927c6-b439-4000-9713-f5d5d982ef22"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["#Connecting this collab notebook to my account.\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","source":["# Load a saved model\n","Please change the path value below"],"metadata":{"id":"28UQSw8EY000"}},{"cell_type":"code","source":["import tensorflow as tf\n","#path of the saved model\n","loaded_model = tf.keras.models.load_model('/content/drive/MyDrive/AIClub_AP_Vineeth_Adimulapu/Project/Best Model/car parts classifiation')"],"metadata":{"id":"1L_9dSteY0bT","executionInfo":{"status":"ok","timestamp":1719991217065,"user_tz":-330,"elapsed":17370,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["# Test Images Path"],"metadata":{"id":"WHtlvsgYeDhx"}},{"cell_type":"code","source":["# Provide the test path to the folder\n","src_folder = \"/content/drive/MyDrive/AIClub_AP_Vineeth_Adimulapu/Test\""],"metadata":{"id":"CBSvWSldeH6K","executionInfo":{"status":"ok","timestamp":1719991225109,"user_tz":-330,"elapsed":429,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["# Dictionary of the labels predicted by the model\n"],"metadata":{"id":"tx_D61Hud9Ux"}},{"cell_type":"code","source":["import os\n","\n","#predicted labels\n","dict_labels = [file for file in os.listdir(src_folder) if os.path.isdir(os.path.join(src_folder, file))]\n","dict_labels.sort()\n","dict_labels = dict(enumerate(dict_labels))\n","print(dict_labels)"],"metadata":{"id":"jVdyOyrpg92t","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719991228591,"user_tz":-330,"elapsed":431,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"8c72b37e-ff29-4402-a8d6-c30e61a14b39"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["{0: 'Aedes sierrensis', 1: 'Anopheles', 2: 'Culiseta incidens'}\n"]}]},{"cell_type":"markdown","source":["# Create a list of the images in the test and train folders"],"metadata":{"id":"hsr_CjPZdwrd"}},{"cell_type":"code","source":["import os\n","directory_contents = []\n","# Find all subfolders in the source folder src_folder\n","for index in range(0,len(dict_labels)):\n","  directory_contents.append(dict_labels[index])\n","print(directory_contents)\n","\n","# List the files in each subfolder\n","list_files = []\n","# Find all the files\n","for folder_name in directory_contents:\n","  files_list = os.listdir(os.path.join(src_folder, folder_name))\n","  list_files.append(files_list)\n","print(list_files)"],"metadata":{"id":"Xkrk7OP9d9CT","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719991232041,"user_tz":-330,"elapsed":453,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"37faef69-3755-48cd-8aab-c3f30e006027"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["['Aedes sierrensis', 'Anopheles', 'Culiseta incidens']\n","[['SK9_1915_102.png', 'rec_20160817-1834_109.png', 'DK15_1916_117.png', 'Argo9_sp2_11_a_129.png', 'Argo13_sp2_16_136.png', 'CK1_2 Mosquitoes East Ridge 6_37_138.png', 'rec_20160817-1921 dk small sequioa ff_148.png', 'William5_6_149.png', '3 Vivek Shadowbrook -7pm (maybe Bag)_164.png', 'In the bag_196.png', 'Stefan1_1823_202.png', 'Felix2_Peak 1 (1)_214.png', 'New Recording 7_219.png'], ['Voice0013_4.png', 'Recording19800215_025_F_14.png', 'Adm (1)_18.png', '20160302 154124AdF_30.png', 'Afar4_69.png', 'Recording19800216_012_90.png'], ['Black Mosquito Glenn Park Day4_ 1hr After Blood Fed_ Ds7_45.png', 'Glenn Park Black Mosquito Day 3 dS4 Iphone6_51.png', 'Glen Park - Black Mosquito - Day 2 - dS4 - Iphone5_53.png']]\n"]}]},{"cell_type":"markdown","source":["# Create the predictions and label lists"],"metadata":{"id":"gkG1taZ5hUgC"}},{"cell_type":"code","source":["from keras.applications.mobilenet_v2 import preprocess_input\n","from tensorflow.keras.preprocessing import image\n","import numpy as np\n","# A counter to increment after processing each categoty\n","category_count = 0\n","# label list\n","label = []\n","# Prediction list\n","predictions = []\n","y_score = []\n","for categories in list_files:\n","  # Create the labels while iterating over each category\n","  label_temp = np.ones((len(categories))).astype(int)*category_count\n","  print(label_temp)\n","  # Add it to existing labels\n","  label.extend(label_temp)\n","  for file_name in categories:\n","    # test image file\n","    img_path = src_folder + '/' + directory_contents[category_count] + '/' + file_name\n","    img = image.load_img(img_path, target_size=(224,224))\n","    img_array = image.img_to_array(img)\n","    img_batch = np.expand_dims(img_array, axis=0)\n","    img_preprocessed = preprocess_input(img_batch)\n","    prediction = loaded_model.predict(img_preprocessed)\n","    y_score.append(prediction)\n","    # Save the index of maximum probability\n","    predictions.append(np.argmax(prediction))\n","  category_count += 1\n"],"metadata":{"id":"sb0k47-zhbKJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719991250735,"user_tz":-330,"elapsed":12231,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"8d46fb76-9bbc-4aa5-c271-211838b17a8a"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["[0 0 0 0 0 0 0 0 0 0 0 0 0]\n","1/1 [==============================] - 4s 4s/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 26ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 29ms/step\n","1/1 [==============================] - 0s 23ms/step\n","[1 1 1 1 1 1]\n","1/1 [==============================] - 0s 22ms/step\n","1/1 [==============================] - 0s 25ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 22ms/step\n","[2 2 2]\n","1/1 [==============================] - 0s 24ms/step\n","1/1 [==============================] - 0s 23ms/step\n","1/1 [==============================] - 0s 27ms/step\n"]}]},{"cell_type":"markdown","source":["# Consfusion Matrix"],"metadata":{"id":"cBPRvi3Jfro_"}},{"cell_type":"code","source":["from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","display_labels = sorted(directory_contents)\n","plt.figure(figsize = (5,5))\n","sns.heatmap(confusion_matrix(label,predictions),\n","            annot = True,\n","            fmt = 'g',\n","            cmap = \"Blues\",\n","            xticklabels=display_labels,\n","            yticklabels = display_labels,\n","            annot_kws={\n","                'fontsize': 8,\n","                'fontweight': 'bold',\n","                'fontfamily': 'serif'\n","            })\n","plt.xlabel(\"Predicted Label\")\n","plt.ylabel(\"True Label\")\n","plt.title(\"Confusion Matrix\")\n","#ConfusionMatrixDisplay.from_predictions(label, predictions, display_labels=display_labels, cmap=\"binary\")\n","plt.show()"],"metadata":{"id":"8GCZrpBf0kOA","colab":{"base_uri":"https://localhost:8080/","height":487},"executionInfo":{"status":"ok","timestamp":1719991258837,"user_tz":-330,"elapsed":1880,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"4267ef51-a965-4869-f510-386088c0bf6c"},"execution_count":7,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 500x500 with 2 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Classification Report"],"metadata":{"id":"qrNetpNVfuky"}},{"cell_type":"code","source":["#classification reports\n","from sklearn.metrics import classification_report\n","print(classification_report(label,predictions))"],"metadata":{"id":"9jp-7oCKOSeH","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1719991265120,"user_tz":-330,"elapsed":701,"user":{"displayName":"tonny blayer","userId":"10225192869350752359"}},"outputId":"e3effd55-83fb-4260-a568-2be63874a94d"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.59      1.00      0.74        13\n","           1       0.00      0.00      0.00         6\n","           2       0.00      0.00      0.00         3\n","\n","    accuracy                           0.59        22\n","   macro avg       0.20      0.33      0.25        22\n","weighted avg       0.35      0.59      0.44        22\n","\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"]}]}]}